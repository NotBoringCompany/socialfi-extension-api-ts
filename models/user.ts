import { POIName } from './poi';
import { Food } from './food';
import { BitOrbType, Item, TerraCapsulatorType } from './item';
import { ExtendedResource } from './resource';
import { InviteCodeData, ReferralData } from './invite';
import { BerryFactoryMastery, CraftingMastery, TappingMastery } from './mastery';
import { AssetType } from './asset';

/****************
 * USER-RELATED MODELS
 ****************/

/**
 * Represents a user.
 */
export interface User {
    /** the unique ID of the user, generated by the database */
    userId: string;
    /** the twitter user ID of the user */
    twitterId: string;
    /** the login method of the account */
    method?: 'twitter' | 'telegram';
    /** the user's twitter profile picture URL */
    twitterProfilePicture: string;
    /** the user's twitter username */
    twitterUsername: string;
    /** the user's twitter display name */
    twitterDisplayName: string;
    /** the user's discord profile */
    discordProfile?: DiscordProfile;
    /** the user's telegram profile */
    telegramProfile?: TelegramProfile;
    /** when the account was created */
    createdTimestamp: number;
    /** 
     * the invite code used for the user to play the game 
     * 
     * if the user signed up via a referral code, the referrer's id is stored here.
     */
    inviteCodeData: InviteCodeData;
    /** the user's personal referral data (including their code, the amount of people they referred and so on) */
    referralData: ReferralData;
    /** the user's wallet data, created when the user signs up for the first time */
    wallet: UserWallet;
    /** users can link up to 10 secondary wallets. this contains the data of each secondary wallet instance, such as the signature. */
    secondaryWallets?: UserSecondaryWallet[];
    /** a list of tweet IDs where chests have been opened for today */
    openedTweetIdsToday: string[];
    /** the user's inventory */
    inventory: UserInventory;
    /** the user's in-game data */
    inGameData: InGameData;
}

/**
 * Represents a user's Web3 wallet.
 */
export interface UserWallet {
    /** the wallet's address */
    address: string;
    /** the wallet's private key encrypted via AES-256; used to export the wallet */
    encryptedPrivateKey: string;
}

/**
 * Represents a user's secondary wallet that they can link to their account.
 */
export interface UserSecondaryWallet {
    /** the message used to generate the signature for verification */
    signatureMessage: string;
    /** the signature of the user from the secondary wallet, showing ownership of the wallet */
    signature: string;
    /** the secondary wallet's address */
    address: string;
}

/**
 * Represents a user's inventory.
 */
export interface UserInventory {
    /** the weight of the inventory (currently only impacted by resources) */
    weight: number;
    /** the maximum inventory weight the user can have */
    maxWeight: number;
    /** the user's xCookies data (i.e. the current xCookies owned, the total xCookies earned from different sources etc.) */
    xCookieData: XCookieData;
    /** the user's diamonds data (i.e. the current diamonds owned, the total diamonds earned from different sources etc.) */
    diamondData: DiamondData;
    /** a list of resources owned */
    resources: ExtendedResource[];
    /** a list of items owned */
    items: Item[];
    /** a list of owned bit cosmetic IDs */
    bitCosmeticIds: number[];
    /** a list of foods owned */
    foods: Food[];
    /** the owned raft ID */
    raftId: number;
    /** a list of owned island IDs */
    islandIds: number[];
    /** a list of owned bit IDs */
    bitIds: number[];
}

/**
 * Represents the user's xCookies data.
 */
export interface XCookieData {
    /** the user's current xCookies left */
    currentXCookies: number;
    /** the total amount of xCookies the user has spent */
    totalXCookiesSpent: number;
    /** the weekly amount of xCookies the user has spent. resets every sunday 23:59 utc */
    weeklyXCookiesSpent: number;
    /** the extended xCookie data (shows how many cookies have been obtained from what source) */
    extendedXCookieData: ExtendedXCookieData[];
}

/**
 * Represents the extended xCookies data.
 */
export interface ExtendedXCookieData {
    xCookies: number;
    source: XCookieSource;
}

/**
 * A list of the sources of obtaining xCookies.
 */
export enum XCookieSource {
    COOKIE_DEPOSIT = 'Cookie Deposit',
    RESOURCE_SELLING = 'Resource Selling',
    DAILY_LOGIN_REWARDS = 'Daily Login Rewards',
    REFERRAL_REWARDS = 'Referral Rewards',
    INDIRECT_REFERRAL_REWARDS = 'Indirect Referral Rewards',
    BEGINNER_REWARDS = 'Beginner Rewards',
    CHEST_REWARDS = 'Chest Rewards',
    COLLAB_REWARDS = 'Collab Rewards',
    LEVELLING_UP = 'Levelling Up',
    QUEST_REWARDS = 'Quest Rewards',
    ISLAND_CLAIMING = 'Island Claiming',
    ISLAND_TAPPING = 'Island Tapping',
    KOS_BENEFITS = 'KOS Benefits',
    TUTORIAL_REWARDS = 'Tutorial Rewards',
    DISCORD_ENGAGEMENT = 'Discord Engagement',
    SHOP_PURCHASE = 'Shop Purchase',
    WONDERSPIN = 'Wonderspin',
    TRADING = 'Trading'
}

/**
 * Represents the user's diamond data.
 */
export interface DiamondData {
    /** the user's current diamonds left */
    currentDiamonds: number;
    /** the total amount of diamonds the user has spent */
    totalDiamondsSpent: number;
    /** the weekly amount of diamonds the user has spent. resets every sunday 23:59 utc */
    weeklyDiamondsSpent: number;
    /** the extended diamond data (shows how many diamonds have been obtained from what source) */
    extendedDiamondData: ExtendedDiamondData[];
}

/**
 * Represents the extended diamond data.
 */
export interface ExtendedDiamondData {
    diamonds: number;
    source: DiamondSource;
}

/**
 * A list of the sources of obtaining diamonds.
 */
export enum DiamondSource {
    SHOP_PURCHASE = 'Shop Purchase',
    WONDERSPIN = 'Wonderspin',
}

/**
 * Represents the user's in-game data
 */
export interface InGameData {
    /** the user's level */
    level: number;
    /** the user PlayerEnergy data */
    energy: PlayerEnergy;
    /**
     * Showcases the user's mastery in different aspects (such as crafting or tapping).
     */
    mastery: PlayerMastery;
    /** the list of tutorial IDs the user has completed at the start */
    completedTutorialIds: number[];
    /** 
     * the user's beginner reward data 
     * 
     * this is a 7-day reward system when the user signs up for the first time.
     */
    beginnerRewardData: BeginnerRewardData;
    /** the user's daily login reward data */
    dailyLoginRewardData: DailyLoginRewardData;
    /** the id of the user's current squad. if the user is not in any squad, this will be null. */
    squadId: string | null;
    /** the timestamp of when the user last left a squad (for cooldown purposes) */
    lastLeftSquad: number;
    /** the current location of the user (either home or in a POI) */
    location: POIName;
    /** 
     * checks if the user is currently travelling to another POI 
     * 
     * if not null, this means that the user is currently travelling to another POI.
     */
    travellingTo: POIName | null;
    /** 
     * the arrival time of the destination at `travellingTo`
     * 
     * value will be 0 if not travelling (i.e. if travellingTo is null)
     */
    destinationArrival: number;
    /** last login timestamp */
    lastLoginTimestamp?: number;
    /** login streak count */
    loginStreak?: number;
    keyData?: UserKeyData;
}

/**
 * Represents the user's beginner reward data.
 */
export interface BeginnerRewardData {
    /** the last claimed timestamp of the beginner reward */
    lastClaimedTimestamp: number;
    /** 
     * checks if the beginner reward is claimable.
     * 
     * this is true by default and will be set to false if the user has claimed the reward for the day.
     * 
     * the scheduler will reset this to true every day at 00:00 UTC.
     */
    isClaimable: boolean;
    /**
     * the days the user has claimed the beginner rewards.
     * 
     * if a user misses a day (i.e. not claiming the beginner rewards between 00:00 - 23:59 of that day, the day will be added to `daysMissed`).
     */
    daysClaimed: number[];
    /**
     * the days the user has missed claiming the beginner rewards.
     */
    daysMissed: number[];
}

/**
 * Represents the user's daily login reward data.
 * 
 * Doesn't require storing rewards earned here, as the rewards are fixed and can be calculated based on the consecutive days (for now).
 */
export interface DailyLoginRewardData {
    /** the last claimed timestamp of the daily login reward */
    lastClaimedTimestamp: number;
    /** 
     * checks if the daily login reward is claimable.
     * 
     * this is true by default and will be set to false if the user has claimed the reward for the day.
     * 
     * the scheduler will reset this to true every day at 00:00 UTC.
     */
    isDailyClaimable: boolean;
    /** the amount of consecutive days the user claimed the rewards */
    consecutiveDaysClaimed: number;
}

/**
 * Represents the daily login reward.
 */
export interface DailyLoginReward {
    /** the type of reward */
    type: DailyLoginRewardType;
    /** the amount of reward */
    amount: number;
}

/**
 * Represents the type of daily login reward.
 */
export enum DailyLoginRewardType {
    X_COOKIES = 'xCookies',
    LEADERBOARD_POINTS = 'Leaderboard Points',
}

/**
 * Represents the beginner reward.
 */
export interface BeginnerReward {
    /** the type of reward */
    type: BeginnerRewardType;
    /** the amount of reward */
    amount: number;
}

/**
 * Represents the type of beginner reward.
 */
export enum BeginnerRewardType {
    X_COOKIES = 'xCookies',
    BIT_ORB_I = BitOrbType.BIT_ORB_I,
    TERRA_CAPSULATOR_I = TerraCapsulatorType.TERRA_CAPSULATOR_I
}

/**
 * Represents a user's discord profile.
 */
export interface DiscordProfile {
    discordId: string;
    /** discord username */
    name: string | null;
    username: string;
    /** discord oauth refresh token, lasts for 365 days */
    token: string;
}

/**
 * Represents a user's telegram profile.
 */
export interface TelegramProfile {
    telegramId: string;
    name: string | null;
    username: string;
}

/**
 * Represents user Energy data.
 */
export interface PlayerEnergy {
    maxEnergy: number;
    currentEnergy: number;
    dailyEnergyPotion: number;
}

/**
 * Represents a user's mastery in different aspects.
 */
export interface PlayerMastery {
    tapping: TappingMastery;
    crafting: CraftingMastery;
    /**
     * the berry factory mastery.
     */
    berryFactory: BerryFactoryMastery;
}

/**
 * Represents user Key (KOS) Data
 */
export interface UserKeyData {
    /** cached value of owned keys */
    ownedKeyCount: number;
    ownedKeyIDs: (string | number)[];
    /** last time getOwnedKeys fetched */
    lastCheckTimestamp: number;
}

/**
 * Represents user's profile
 */
export interface UserProfile {
    _id: string;
    twitterId: string;
    name: string;
    username: string;
    profilePicture: string;
    level: string | number;
    rank: string | number;
    points: string | number;
    ownedKeyCount: number;
    squadName: string | null;
    mastery: PlayerMastery;
}
