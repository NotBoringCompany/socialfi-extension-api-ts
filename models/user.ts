import { CityName, CityShopItemName } from './city';
import { Food } from './food';
import { Item } from './item';
import { ExtendedResource } from './resource';

/****************
 * USER-RELATED MODELS
 ****************/

/**
 * Represents a user.
 */
export interface User {
    /** the unique ID of the user, generated by the database */
    userId: string;
    /** the twitter user ID of the user */
    twitterId: string;
    /** the user's wallet data, created when the user signs up for the first time */
    wallet: UserWallet;
    /** a list of tweet IDs where chests have been opened for today */
    openedTweetIdsToday: string[];
    /** the user's inventory */
    inventory: UserInventory;
    /** the user's in-game stats */
    stats: UserStats;
}

/**
 * Represents a user's Web3 wallet.
 */
export interface UserWallet {
    /** the wallet's public key, i.e. address */
    publicKey: string;
    /** the wallet's private key used to export the wallet */
    privateKey: string;
}

/**
 * Represents a user's inventory.
 */
export interface UserInventory {
    /** the weight of the inventory (currently only impacted by resources) */
    weight: number;
    /** the maximum inventory weight the user can have */
    maxWeight: number;
    /** the amount of in-game cookies owned (users are required to convert from blockchain cookies first) */
    xCookies: number;
    /** the amount of cookie crumbs owned */
    cookieCrumbs: number;
    /** a list of resources owned */
    resources: ExtendedResource[];
    /** a list of items owned */
    items: Item[];
    /** a list of foods owned */
    foods: Food[];
    /** the owned raft ID */
    raftId: number;
    /** a list of owned island IDs */
    islandIds: number[];
    /** a list of owned bit IDs */
    bitIds: number[];
    /** total amount of bit orbs owned */
    totalBitOrbs: number;
    /** total amount of terra caps owned */
    totalTerraCapsulators: number;
}

/**
 * Represents the user's in-game stats
 */
export interface UserStats {
    /** the user's level */
    level: number;
    /** the user's transactions within the in-game shops in all cities 
     * used to limit purchases and sales, etc.
     * Each `ShopTransactionData` instance corresponds to the transaction data of a shop in one city.
     */
    shopTransactionData: UserShopTransactionData[];
}

/**
 * Represents the user's transactions within the in-game shops in all cities.
 */
export interface UserShopTransactionData {
    city: CityName;
    purchases: UserShopPurchase[];
    sales: UserShopSale[];
}

/**
 * Represents a user's purchase in a shop.
 */
export interface UserShopPurchase {
    /** the item name */
    name: CityShopItemName;
    /** the amount bought */
    amount: number;
    /** the max amount of this item the user can buy (will get reset) */
    limit: number;
}

/**
 * Represents a user's sale in a shop.
 */
export interface UserShopSale {
    /** the item name */
    name: CityShopItemName;
    /** the amount sold */
    amount: number;
    /** the max amount of this item the user can sell (will get reset) */
    limit: number;
}