import { CityName } from './poi';
import { Food } from './food';
import { Item } from './item';
import { ExtendedResource } from './resource';

/****************
 * USER-RELATED MODELS
 ****************/

/**
 * Represents a user.
 */
export interface User {
    /** the unique ID of the user, generated by the database */
    userId: string;
    /** the twitter user ID of the user */
    twitterId: string;
    /** the user's wallet data, created when the user signs up for the first time */
    wallet: UserWallet;
    /** a list of tweet IDs where chests have been opened for today */
    openedTweetIdsToday: string[];
    /** the user's inventory */
    inventory: UserInventory;
    /** the user's in-game data */
    inGameData: InGameData;
}

/**
 * Represents a user's Web3 wallet.
 */
export interface UserWallet {
    /** the wallet's public key, i.e. address */
    publicKey: string;
    /** the wallet's private key used to export the wallet */
    privateKey: string;
}

/**
 * Represents a user's inventory.
 */
export interface UserInventory {
    /** the weight of the inventory (currently only impacted by resources) */
    weight: number;
    /** the maximum inventory weight the user can have */
    maxWeight: number;
    /** the amount of in-game cookies owned (users are required to convert from blockchain cookies first) */
    xCookies: number;
    /** the amount of cookie crumbs owned */
    cookieCrumbs: number;
    /** a list of resources owned */
    resources: ExtendedResource[];
    /** a list of items owned */
    items: Item[];
    /** a list of foods owned */
    foods: Food[];
    /** the owned raft ID */
    raftId: number;
    /** a list of owned island IDs */
    islandIds: number[];
    /** a list of owned bit IDs */
    bitIds: number[];
    /** total amount of bit orbs owned */
    totalBitOrbs: number;
    /** total amount of terra caps owned */
    totalTerraCapsulators: number;
}

/**
 * Represents the user's in-game data
 */
export interface InGameData {
    /** the user's level */
    level: number;
    /** the current location of the user (either home or in a city) */
    location: CityName;
    /** 
     * checks if the user is currently travelling to another city 
     * 
     * if not null, this means that the user is currently travelling to another city.
     */
    travellingTo: CityName | null;
    /** 
     * the arrival time of the destination at `travellingTo`
     * 
     * value will be 0 if not travelling (i.e. if travellingTo is null)
     */
    destinationArrival: number;
}

